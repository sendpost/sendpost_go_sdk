/*
SendPost API

Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.

API version: 1.0.0
Contact: hello@sendpost.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendpost

import (
	"encoding/json"
)

// checks if the SuppressionEmail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuppressionEmail{}

// SuppressionEmail struct for SuppressionEmail
type SuppressionEmail struct {
	Email *string `json:"email,omitempty"`
}

// NewSuppressionEmail instantiates a new SuppressionEmail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuppressionEmail() *SuppressionEmail {
	this := SuppressionEmail{}
	return &this
}

// NewSuppressionEmailWithDefaults instantiates a new SuppressionEmail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuppressionEmailWithDefaults() *SuppressionEmail {
	this := SuppressionEmail{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *SuppressionEmail) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuppressionEmail) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *SuppressionEmail) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *SuppressionEmail) SetEmail(v string) {
	o.Email = &v
}

func (o SuppressionEmail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuppressionEmail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	return toSerialize, nil
}

type NullableSuppressionEmail struct {
	value *SuppressionEmail
	isSet bool
}

func (v NullableSuppressionEmail) Get() *SuppressionEmail {
	return v.value
}

func (v *NullableSuppressionEmail) Set(val *SuppressionEmail) {
	v.value = val
	v.isSet = true
}

func (v NullableSuppressionEmail) IsSet() bool {
	return v.isSet
}

func (v *NullableSuppressionEmail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuppressionEmail(val *SuppressionEmail) *NullableSuppressionEmail {
	return &NullableSuppressionEmail{value: val, isSet: true}
}

func (v NullableSuppressionEmail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuppressionEmail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


