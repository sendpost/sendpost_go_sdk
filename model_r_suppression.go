/*
SendPost API

Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.

API version: 1.0.0
Contact: hello@sendpost.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendpost

import (
	"encoding/json"
)

// checks if the RSuppression type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RSuppression{}

// RSuppression struct for RSuppression
type RSuppression struct {
	HardBounce []SuppressionEmail `json:"hardBounce,omitempty"`
	Manual []SuppressionEmail `json:"manual,omitempty"`
	SpamComplaint []SuppressionEmail `json:"spamComplaint,omitempty"`
	Unsubscribe []SuppressionEmail `json:"unsubscribe,omitempty"`
}

// NewRSuppression instantiates a new RSuppression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRSuppression() *RSuppression {
	this := RSuppression{}
	return &this
}

// NewRSuppressionWithDefaults instantiates a new RSuppression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRSuppressionWithDefaults() *RSuppression {
	this := RSuppression{}
	return &this
}

// GetHardBounce returns the HardBounce field value if set, zero value otherwise.
func (o *RSuppression) GetHardBounce() []SuppressionEmail {
	if o == nil || IsNil(o.HardBounce) {
		var ret []SuppressionEmail
		return ret
	}
	return o.HardBounce
}

// GetHardBounceOk returns a tuple with the HardBounce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RSuppression) GetHardBounceOk() ([]SuppressionEmail, bool) {
	if o == nil || IsNil(o.HardBounce) {
		return nil, false
	}
	return o.HardBounce, true
}

// HasHardBounce returns a boolean if a field has been set.
func (o *RSuppression) HasHardBounce() bool {
	if o != nil && !IsNil(o.HardBounce) {
		return true
	}

	return false
}

// SetHardBounce gets a reference to the given []SuppressionEmail and assigns it to the HardBounce field.
func (o *RSuppression) SetHardBounce(v []SuppressionEmail) {
	o.HardBounce = v
}

// GetManual returns the Manual field value if set, zero value otherwise.
func (o *RSuppression) GetManual() []SuppressionEmail {
	if o == nil || IsNil(o.Manual) {
		var ret []SuppressionEmail
		return ret
	}
	return o.Manual
}

// GetManualOk returns a tuple with the Manual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RSuppression) GetManualOk() ([]SuppressionEmail, bool) {
	if o == nil || IsNil(o.Manual) {
		return nil, false
	}
	return o.Manual, true
}

// HasManual returns a boolean if a field has been set.
func (o *RSuppression) HasManual() bool {
	if o != nil && !IsNil(o.Manual) {
		return true
	}

	return false
}

// SetManual gets a reference to the given []SuppressionEmail and assigns it to the Manual field.
func (o *RSuppression) SetManual(v []SuppressionEmail) {
	o.Manual = v
}

// GetSpamComplaint returns the SpamComplaint field value if set, zero value otherwise.
func (o *RSuppression) GetSpamComplaint() []SuppressionEmail {
	if o == nil || IsNil(o.SpamComplaint) {
		var ret []SuppressionEmail
		return ret
	}
	return o.SpamComplaint
}

// GetSpamComplaintOk returns a tuple with the SpamComplaint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RSuppression) GetSpamComplaintOk() ([]SuppressionEmail, bool) {
	if o == nil || IsNil(o.SpamComplaint) {
		return nil, false
	}
	return o.SpamComplaint, true
}

// HasSpamComplaint returns a boolean if a field has been set.
func (o *RSuppression) HasSpamComplaint() bool {
	if o != nil && !IsNil(o.SpamComplaint) {
		return true
	}

	return false
}

// SetSpamComplaint gets a reference to the given []SuppressionEmail and assigns it to the SpamComplaint field.
func (o *RSuppression) SetSpamComplaint(v []SuppressionEmail) {
	o.SpamComplaint = v
}

// GetUnsubscribe returns the Unsubscribe field value if set, zero value otherwise.
func (o *RSuppression) GetUnsubscribe() []SuppressionEmail {
	if o == nil || IsNil(o.Unsubscribe) {
		var ret []SuppressionEmail
		return ret
	}
	return o.Unsubscribe
}

// GetUnsubscribeOk returns a tuple with the Unsubscribe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RSuppression) GetUnsubscribeOk() ([]SuppressionEmail, bool) {
	if o == nil || IsNil(o.Unsubscribe) {
		return nil, false
	}
	return o.Unsubscribe, true
}

// HasUnsubscribe returns a boolean if a field has been set.
func (o *RSuppression) HasUnsubscribe() bool {
	if o != nil && !IsNil(o.Unsubscribe) {
		return true
	}

	return false
}

// SetUnsubscribe gets a reference to the given []SuppressionEmail and assigns it to the Unsubscribe field.
func (o *RSuppression) SetUnsubscribe(v []SuppressionEmail) {
	o.Unsubscribe = v
}

func (o RSuppression) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RSuppression) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HardBounce) {
		toSerialize["hardBounce"] = o.HardBounce
	}
	if !IsNil(o.Manual) {
		toSerialize["manual"] = o.Manual
	}
	if !IsNil(o.SpamComplaint) {
		toSerialize["spamComplaint"] = o.SpamComplaint
	}
	if !IsNil(o.Unsubscribe) {
		toSerialize["unsubscribe"] = o.Unsubscribe
	}
	return toSerialize, nil
}

type NullableRSuppression struct {
	value *RSuppression
	isSet bool
}

func (v NullableRSuppression) Get() *RSuppression {
	return v.value
}

func (v *NullableRSuppression) Set(val *RSuppression) {
	v.value = val
	v.isSet = true
}

func (v NullableRSuppression) IsSet() bool {
	return v.isSet
}

func (v *NullableRSuppression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRSuppression(val *RSuppression) *NullableRSuppression {
	return &NullableRSuppression{value: val, isSet: true}
}

func (v NullableRSuppression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRSuppression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


