/*
SendPost API

Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.

API version: 1.0.0
Contact: hello@sendpost.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendpost

import (
	"encoding/json"
)

// checks if the RDSuppression type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RDSuppression{}

// RDSuppression struct for RDSuppression
type RDSuppression struct {
	Suppressions []SuppressionEmail `json:"suppressions,omitempty"`
}

// NewRDSuppression instantiates a new RDSuppression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRDSuppression() *RDSuppression {
	this := RDSuppression{}
	return &this
}

// NewRDSuppressionWithDefaults instantiates a new RDSuppression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRDSuppressionWithDefaults() *RDSuppression {
	this := RDSuppression{}
	return &this
}

// GetSuppressions returns the Suppressions field value if set, zero value otherwise.
func (o *RDSuppression) GetSuppressions() []SuppressionEmail {
	if o == nil || IsNil(o.Suppressions) {
		var ret []SuppressionEmail
		return ret
	}
	return o.Suppressions
}

// GetSuppressionsOk returns a tuple with the Suppressions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSuppression) GetSuppressionsOk() ([]SuppressionEmail, bool) {
	if o == nil || IsNil(o.Suppressions) {
		return nil, false
	}
	return o.Suppressions, true
}

// HasSuppressions returns a boolean if a field has been set.
func (o *RDSuppression) HasSuppressions() bool {
	if o != nil && !IsNil(o.Suppressions) {
		return true
	}

	return false
}

// SetSuppressions gets a reference to the given []SuppressionEmail and assigns it to the Suppressions field.
func (o *RDSuppression) SetSuppressions(v []SuppressionEmail) {
	o.Suppressions = v
}

func (o RDSuppression) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RDSuppression) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Suppressions) {
		toSerialize["suppressions"] = o.Suppressions
	}
	return toSerialize, nil
}

type NullableRDSuppression struct {
	value *RDSuppression
	isSet bool
}

func (v NullableRDSuppression) Get() *RDSuppression {
	return v.value
}

func (v *NullableRDSuppression) Set(val *RDSuppression) {
	v.value = val
	v.isSet = true
}

func (v NullableRDSuppression) IsSet() bool {
	return v.isSet
}

func (v *NullableRDSuppression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRDSuppression(val *RDSuppression) *NullableRDSuppression {
	return &NullableRDSuppression{value: val, isSet: true}
}

func (v NullableRDSuppression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRDSuppression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


