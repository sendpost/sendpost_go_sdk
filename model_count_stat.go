/*
SendPost API

Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.

API version: 1.0.0
Contact: hello@sendpost.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendpost

import (
	"encoding/json"
)

// checks if the CountStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountStat{}

// CountStat struct for CountStat
type CountStat struct {
	Count *int64 `json:"count,omitempty"`
}

// NewCountStat instantiates a new CountStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountStat() *CountStat {
	this := CountStat{}
	return &this
}

// NewCountStatWithDefaults instantiates a new CountStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountStatWithDefaults() *CountStat {
	this := CountStat{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *CountStat) GetCount() int64 {
	if o == nil || IsNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountStat) GetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *CountStat) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *CountStat) SetCount(v int64) {
	o.Count = &v
}

func (o CountStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	return toSerialize, nil
}

type NullableCountStat struct {
	value *CountStat
	isSet bool
}

func (v NullableCountStat) Get() *CountStat {
	return v.value
}

func (v *NullableCountStat) Set(val *CountStat) {
	v.value = val
	v.isSet = true
}

func (v NullableCountStat) IsSet() bool {
	return v.isSet
}

func (v *NullableCountStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountStat(val *CountStat) *NullableCountStat {
	return &NullableCountStat{value: val, isSet: true}
}

func (v NullableCountStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


