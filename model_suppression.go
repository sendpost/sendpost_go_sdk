/*
SendPost API

Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.

API version: 1.0.0
Contact: hello@sendpost.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendpost

import (
	"encoding/json"
)

// checks if the Suppression type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Suppression{}

// Suppression struct for Suppression
type Suppression struct {
	Created *int64 `json:"created,omitempty"`
	Email *string `json:"email,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Reason *int64 `json:"reason,omitempty"`
	SmtpError *string `json:"smtp_error,omitempty"`
}

// NewSuppression instantiates a new Suppression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuppression() *Suppression {
	this := Suppression{}
	return &this
}

// NewSuppressionWithDefaults instantiates a new Suppression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuppressionWithDefaults() *Suppression {
	this := Suppression{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Suppression) GetCreated() int64 {
	if o == nil || IsNil(o.Created) {
		var ret int64
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Suppression) GetCreatedOk() (*int64, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Suppression) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given int64 and assigns it to the Created field.
func (o *Suppression) SetCreated(v int64) {
	o.Created = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Suppression) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Suppression) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Suppression) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Suppression) SetEmail(v string) {
	o.Email = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Suppression) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Suppression) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Suppression) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Suppression) SetId(v int64) {
	o.Id = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *Suppression) GetReason() int64 {
	if o == nil || IsNil(o.Reason) {
		var ret int64
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Suppression) GetReasonOk() (*int64, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *Suppression) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given int64 and assigns it to the Reason field.
func (o *Suppression) SetReason(v int64) {
	o.Reason = &v
}

// GetSmtpError returns the SmtpError field value if set, zero value otherwise.
func (o *Suppression) GetSmtpError() string {
	if o == nil || IsNil(o.SmtpError) {
		var ret string
		return ret
	}
	return *o.SmtpError
}

// GetSmtpErrorOk returns a tuple with the SmtpError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Suppression) GetSmtpErrorOk() (*string, bool) {
	if o == nil || IsNil(o.SmtpError) {
		return nil, false
	}
	return o.SmtpError, true
}

// HasSmtpError returns a boolean if a field has been set.
func (o *Suppression) HasSmtpError() bool {
	if o != nil && !IsNil(o.SmtpError) {
		return true
	}

	return false
}

// SetSmtpError gets a reference to the given string and assigns it to the SmtpError field.
func (o *Suppression) SetSmtpError(v string) {
	o.SmtpError = &v
}

func (o Suppression) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Suppression) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.SmtpError) {
		toSerialize["smtp_error"] = o.SmtpError
	}
	return toSerialize, nil
}

type NullableSuppression struct {
	value *Suppression
	isSet bool
}

func (v NullableSuppression) Get() *Suppression {
	return v.value
}

func (v *NullableSuppression) Set(val *Suppression) {
	v.value = val
	v.isSet = true
}

func (v NullableSuppression) IsSet() bool {
	return v.isSet
}

func (v *NullableSuppression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuppression(val *Suppression) *NullableSuppression {
	return &NullableSuppression{value: val, isSet: true}
}

func (v NullableSuppression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuppression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


